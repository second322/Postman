// HW_2 Postman


// http://162.55.220.72:5005/first
// 1. Отправить запрос.
http://162.55.220.72:5005/first -> save -> send

// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Проверить, что в body приходит правильный string.
pm.test("Body is correct", function () {
    pm.response.to.have.body("This is the first responce from server!");
});

---------------------------------------------------------------------------

// http://162.55.220.72:5005/user_info_3
// 1. Отправить запрос.
http://162.55.220.72:5005/user_info_3 -> save -> send

// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
var jsonData = pm.response.json();

// 4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Check name", function () {
    pm.expect(jsonData.name).to.eql("Max");
});


// 5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Check age", function () {
    pm.expect(jsonData.age).to.eql("22");
});

// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Check salary", function () {
    pm.expect(jsonData.salary).to.eql(1000);
});

// 7. Спарсить request.
var reqBody = request.data;


// 8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Your test name", function () {
    pm.expect(jsonData.name).to.eql(reqBody.name);
});

// 9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Your test age", function () {
    pm.expect(jsonData.age).to.eql(reqBody.age);
});

// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Your test salary", function () {
    pm.expect(jsonData.salary).to.eql(Number(reqBody.salary));
});

// 11. Вывести в консоль параметр family из response.
console.log(jsonData.family)

// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test("Salary_1_5_year check", function () {
    
    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqBody.salary*4);
});

----------------------------------------------------------------------

// http://162.55.220.72:5005/object_info_3

// 1. Отправить запрос.
http://162.55.220.72:5005/object_info_3 -> save -> send

// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
var jsonData = pm.response.json();

// 4. Спарсить request.
var reqBody = request.data;

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)


// 6. Проверить, что age в ответе равно age s request (age забрать из request.)

// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Check salary", function () {
    
    pm.expect(jsonData.salary).to.eql(Number(reqBody.salary));
});

// 8. Вывести в консоль параметр family из response.
console.log(jsonData.family)

// 9. Проверить, что у параметра dog есть параметры name.
pm.test("Property dog.name", function () {
    
    pm.expect(jsonData.family.pets.dog).to.haveOwnProperty('name');
});

// 10. Проверить, что у параметра dog есть параметры age.
pm.test("Property dog.age", function () {
    
    pm.expect(jsonData.family.pets.dog).to.haveOwnProperty('age');
});


// 11. Проверить, что параметр name имеет значение Luky.
pm.test("Check dog.name", function () {
    
    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');
});

// 12. Проверить, что параметр age имеет значение 4.
pm.test("Check dog.age", function () {
    
    pm.expect(jsonData.family.pets.dog.age).to.eql(4);
});


--------------------------------------------------------


// http://162.55.220.72:5005/object_info_4
// 1. Отправить запрос.
http://162.55.220.72:5005/object_info_4?name=Max&age=22&salary=1000 -> save -> send
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
var jsonData = pm.response.json();
 console.log('response!: ', jsonData)


// 4. Спарсить request.
var reqBody = pm.request.url.query.toObject();
console.log('request!: ', reqBody)

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Check name", function () {
    pm.expect(jsonData.name).to.eql(reqBody.name);
});

// 6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("Check age", function () {
    pm.expect(jsonData.age).to.eql(Number(reqBody.age));
});

// 7. Вывести в консоль параметр salary из request.
console.log(reqBody.salary)

// 8. Вывести в консоль параметр salary из response.
console.log(jsonData.salary)

// 9. Вывести в консоль 0-й элемент параметра salary из response.
 console.log(jsonData.salary[0])
// // 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
 console.log(jsonData.salary[1])
// // 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
 console.log(jsonData.salary[2])
// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Check salary[0]", function () {
    
    pm.expect(jsonData.salary[0]).to.eql(Number(reqBody.salary));
});

// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Check salary[1]", function () {
    
    pm.expect(Number(jsonData.salary[1])).to.eql(2*reqBody.salary);
});

// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Check salary[2]", function () {
    
    pm.expect(Number(jsonData.salary[2])).to.eql(3*reqBody.salary);
});

// 15. Создать в окружении переменную name
//environment -> + -> name

// 16. Создать в окружении переменную age
//environment -> + -> age

// 17. Создать в окружении переменную salary
//environment -> + -> salary

// 18. Передать в окружение переменную name
pm.environment.set("name", jsonData.name);

// 19. Передать в окружение переменную age
pm.environment.set("age", jsonData.age);

// 20. Передать в окружение переменную salary
pm.environment.set("salary", jsonData.salary);

// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

for(var i = 0;i < jsonData.salary.length;i++){

    console.log(jsonData.salary[i])
}
